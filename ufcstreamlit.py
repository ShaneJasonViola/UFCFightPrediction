# -*- coding: utf-8 -*-
"""UFCStreamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1949ZdqPuHt9fLz4fmmwtQGuAShEhDCbI
"""

import streamlit as st

# --- Safe Imports ---
try:
    import pandas as pd
    import numpy as np
    import joblib
    import matplotlib.pyplot as plt
    import seaborn as sns
import traceback

except Exception as e:
    st.error("Failed to load model:")
    st.text(traceback.format_exc())
    st.stop()

# --- Load Trained Model ---
try:
    model = joblib.load("random_forest_model.pkl")  # Ensure this is the exact filename on Streamlit Cloud
except FileNotFoundError:
    st.error("Model file not found. Make sure 'random_forest_model.pkl' is uploaded to the repo.")
    st.stop()
except Exception as e:
    st.error(f"Failed to load model: {e}")
    st.stop()

# --- Streamlit Page Config ---
st.set_page_config(page_title="UFC Fight Outcome Predictor", layout="wide")
st.title("ðŸ¥Š UFC Fight Outcome Predictor")

# --- User Input Form ---
st.sidebar.header("Enter Fighter Stats")
with st.sidebar.form("input_form"):
    red_age = st.number_input("Red Fighter Age", 18, 60, 30)
    blue_age = st.number_input("Blue Fighter Age", 18, 60, 30)

    red_odds = st.number_input("Red Fighter Odds", value=-150)
    blue_odds = st.number_input("Blue Fighter Odds", value=130)

    red_reach = st.number_input("Red Reach (cm)", 100, 250, 180)
    blue_reach = st.number_input("Blue Reach (cm)", 100, 250, 180)

    red_td = st.number_input("Red Avg Takedowns Landed", value=1.5)
    blue_td = st.number_input("Blue Avg Takedowns Landed", value=1.0)

    red_sig_str_pct = st.slider("Red Sig. Strike %", 0.0, 1.0, 0.45)
    blue_sig_str_pct = st.slider("Blue Sig. Strike %", 0.0, 1.0, 0.40)

    red_td_pct = st.slider("Red Takedown %", 0.0, 1.0, 0.35)
    blue_td_pct = st.slider("Blue Takedown %", 0.0, 1.0, 0.30)

    red_sub_att = st.number_input("Red Submission Attempts", value=0.5)
    blue_sub_att = st.number_input("Blue Submission Attempts", value=0.3)

    red_sigstr_landed = st.number_input("Red Sig. Strikes Landed", value=30.0)
    blue_sigstr_landed = st.number_input("Blue Sig. Strikes Landed", value=25.0)

    red_ko = st.number_input("Red Wins by KO", value=5)
    red_sub = st.number_input("Red Wins by Submission", value=3)
    red_wins = st.number_input("Red Total Wins", value=10)
    blue_total_fights = st.number_input("Blue Total Fights", value=15)

    submit = st.form_submit_button("Predict Outcome")

# --- Compute Feature Differences ---
def compute_features():
    return pd.DataFrame([{
        "RedAge": red_age,
        "BlueAge": blue_age,
        "RedOdds": red_odds,
        "BlueOdds": blue_odds,
        "RedAvgTDLanded": red_td,
        "BlueAvgTDLanded": blue_td,
        "RedAvgSigStrPct": red_sig_str_pct,
        "BlueAvgSigStrPct": blue_sig_str_pct,
        "RedAvgTDPct": red_td_pct,
        "BlueAvgTDPct": blue_td_pct,
        "RedAvgSubAtt": red_sub_att,
        "BlueAvgSubAtt": blue_sub_att,
        "RedAvgSigStrLanded": red_sigstr_landed,
        "BlueAvgSigStrLanded": blue_sigstr_landed,
        "RedWinsByKO": red_ko,
        "RedWinsBySubmission": red_sub,
        "RedWins": red_wins,
        "BlueTotalFights": blue_total_fights,
        "ReachDif": red_reach - blue_reach,
        "AgeDif": red_age - blue_age,
        "TDLandedDif": red_td - blue_td,
        "SigStrPctDif": red_sig_str_pct - blue_sig_str_pct,
        "TDPctDiff": red_td_pct - blue_td_pct,
        "SubAttDif": red_sub_att - blue_sub_att,
        "SigStrLandedDif": red_sigstr_landed - blue_sigstr_landed,
        "KOPctDiff": red_ko / (red_wins + 1),
        "SubPctDiff": red_sub / (red_wins + 1),
    }])

# --- Prediction ---
if submit:
    try:
        X_input = compute_features()
        pred = model.predict(X_input)[0]
        prob = model.predict_proba(X_input)[0]
        result = "Red Fighter Wins" if pred == 1 else "Blue Fighter Wins"
        st.success(f"Prediction: **{result}**")
        st.write(f"Confidence - Red: {prob[1]*100:.1f}% | Blue: {prob[0]*100:.1f}%")
    except Exception as e:
        st.error(f"Prediction failed: {e}")

# --- Sample Visualization ---
st.markdown("---")
st.subheader("ðŸ“Š Sample Win Method Chart")
viz_data = {"Method": ["KO", "Submission", "Decision"], "Percentage": [40, 25, 35]}
sns.barplot(data=pd.DataFrame(viz_data), x="Method", y="Percentage")
plt.title("Win Method Distribution")
st.pyplot(plt.gcf())
plt.clf()

# -*- coding: utf-8 -*-
"""UFCStreamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1949ZdqPuHt9fLz4fmmwtQGuAShEhDCbI
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# Load model
model = joblib.load("random_forest_model.pkl")

# Set page config
st.set_page_config(page_title="UFC Fight Outcome Predictor", layout="wide")
st.title("ðŸ¥Š UFC Fight Outcome Predictor")

# Sidebar: Input form
st.sidebar.header("Enter Fighter Stats")
with st.sidebar.form("input_form"):
    red_age = st.number_input("Red Fighter Age", min_value=18, max_value=60, value=30)
    blue_age = st.number_input("Blue Fighter Age", min_value=18, max_value=60, value=30)

    red_odds = st.number_input("Red Fighter Odds", value=-150)
    blue_odds = st.number_input("Blue Fighter Odds", value=130)

    red_reach = st.number_input("Red Reach (cm)", min_value=100, max_value=250, value=180)
    blue_reach = st.number_input("Blue Reach (cm)", min_value=100, max_value=250, value=180)

    red_td = st.number_input("Red Avg Takedowns Landed", value=1.5)
    blue_td = st.number_input("Blue Avg Takedowns Landed", value=1.0)

    red_sig_str_pct = st.slider("Red Sig. Strike %", 0.0, 1.0, 0.45)
    blue_sig_str_pct = st.slider("Blue Sig. Strike %", 0.0, 1.0, 0.40)

    red_td_pct = st.slider("Red Takedown %", 0.0, 1.0, 0.35)
    blue_td_pct = st.slider("Blue Takedown %", 0.0, 1.0, 0.30)

    red_sub_att = st.number_input("Red Submission Attempts", value=0.5)
    blue_sub_att = st.number_input("Blue Submission Attempts", value=0.3)

    red_sigstr_landed = st.number_input("Red Sig. Strikes Landed", value=30.0)
    blue_sigstr_landed = st.number_input("Blue Sig. Strikes Landed", value=25.0)

    red_ko = st.number_input("Red Wins by KO", value=5)
    red_sub = st.number_input("Red Wins by Submission", value=3)
    red_wins = st.number_input("Red Total Wins", value=10)

    blue_total_fights = st.number_input("Blue Total Fights", value=15)

    submit = st.form_submit_button("Predict Outcome")

# Compute difference features
def compute_features():
    reach_dif = red_reach - blue_reach
    age_dif = red_age - blue_age
    td_dif = red_td - blue_td
    sigstr_pct_dif = red_sig_str_pct - blue_sig_str_pct
    td_pct_dif = red_td_pct - blue_td_pct
    sub_att_dif = red_sub_att - blue_sub_att
    sigstr_landed_dif = red_sigstr_landed - blue_sigstr_landed
    kopct_red = red_ko / (red_wins + 1)
    subpct_red = red_sub / (red_wins + 1)

    features = pd.DataFrame([{
        "RedAge": red_age,
        "BlueAge": blue_age,
        "RedOdds": red_odds,
        "BlueOdds": blue_odds,
        "RedAvgTDLanded": red_td,
        "BlueAvgTDLanded": blue_td,
        "RedAvgSigStrPct": red_sig_str_pct,
        "BlueAvgSigStrPct": blue_sig_str_pct,
        "RedAvgTDPct": red_td_pct,
        "BlueAvgTDPct": blue_td_pct,
        "RedAvgSubAtt": red_sub_att,
        "BlueAvgSubAtt": blue_sub_att,
        "RedAvgSigStrLanded": red_sigstr_landed,
        "BlueAvgSigStrLanded": blue_sigstr_landed,
        "RedWinsByKO": red_ko,
        "RedWinsBySubmission": red_sub,
        "RedWins": red_wins,
        "BlueTotalFights": blue_total_fights,
        "ReachDif": reach_dif,
        "AgeDif": age_dif,
        "TDLandedDif": td_dif,
        "SigStrPctDif": sigstr_pct_dif,
        "TDPctDiff": td_pct_dif,
        "SubAttDif": sub_att_dif,
        "SigStrLandedDif": sigstr_landed_dif,
        "KOPctDiff": kopct_red,
        "SubPctDiff": subpct_red
    }])

    return features

# Prediction
if submit:
    try:
        X_input = compute_features()
        pred = model.predict(X_input)[0]
        prob = model.predict_proba(X_input)[0]

        result = "Red Fighter Wins" if pred == 1 else "Blue Fighter Wins"
        st.success(f"Prediction: **{result}**")
        st.write(f"Confidence - Red: {prob[1]*100:.1f}% | Blue: {prob[0]*100:.1f}%")

    except Exception as e:
        st.error(f"Error during prediction: {e}")

# --- Optional: Placeholder for graphs ---
st.markdown("---")
st.subheader("ðŸ“Š Data Visualizations")

# Example bar chart (replace with your actual graphs)
data = {"Method": ["KO", "Submission", "Decision"], "Percentage": [40, 25, 35]}
df_viz = pd.DataFrame(data)
sns.barplot(data=df_viz, x="Method", y="Percentage")
plt.title("Win Method Distribution")
st.pyplot(plt.gcf())
plt.clf()
